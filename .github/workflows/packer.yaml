name: Deploy

on:
  push:
    branches:
      - main
      - feature/*

jobs:
  packer_build:
    name: AMI build with Packer
    runs-on: ubuntu-latest
    environment: tmp
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: us-east-1
      AMI_NAME: default_webserver_snapshot # amazon-linux-sandbox

    outputs:
      ami_id: ${{ steps.build.outputs.ami_id }}

    steps:
      - name: сheckout
        run: |
          git clone https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git \
            --branch ${{ github.ref_name }}
          pwd
          ls -lah
          cd ${{ github.event.repository.name }}

      # - name: Check for Packer changes
      #   id: changes
      #   run: |
      #     cd ${{ github.event.repository.name }}
      #     if git diff --quiet HEAD^ HEAD .packer/ then
      #       echo "No changes in Packer configuration. Skipping build."
      #       exit 0
      #     else
      #       echo "Packer files changed. Proceeding with build."
      #     fi

      #TODO: добавить возможность пропуска, хз вручную как то, апровы или что еще, придумать короче
        # wokrlfow dipstach с входными параметрами

      - name: deregister previous AMI
        run: |
          image_info=$(aws ec2 describe-images --owners self \
            --filters Name=name,Values=$AMI_NAME \
            --query 'Images[0].{ImageId: ImageId, SnapshotId: BlockDeviceMappings[0].Ebs.SnapshotId}')

          # TODO: else логирование
          if [ "$image_info" != "null" ]; then
            image_id=$(echo $image_info | jq -r '.ImageId')
            snapshot_id=$(echo $image_info| jq -r '.SnapshotId')

            aws ec2 deregister-image --image-id $image_id
            if [ $? -eq 0 ]; then
              echo "image $image_id deregistered"
            fi
            aws ec2 delete-snapshot --snapshot-id $snapshot_id
            if [ $? -eq 0 ]; then
              echo "snapshot $snapshot_id deleted"
            fi
          fi

      - name: build
        id: build
        run: |
          cd ${{ github.event.repository.name }}
          cd packer
          packer init .
          packer build -var "ami_name=$AMI_NAME" .
          cat manifest.json
          ami_id_val=$(jq -r '(.last_run_uuid as $uid | .builds[] | select(.packer_run_uuid == $uid) | .artifact_id | split(":")[1])' manifest.json)
          echo "ami_id=${ami_id_val}" >> "$GITHUB_OUTPUT"

      # - name: artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: manifest.json
      #     path:


  terraform_deploy:
    name: Terraform Deploy
    runs-on: ubuntu-latest
    environment: tmp
    needs: packer_build

    steps:
      - name: сheckout
        run: |
          git clone https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git \
            --branch ${{ github.ref_name }}
          pwd
          ls -lah
          cd ${{ github.event.repository.name }}

      - name: test
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          echo "AMI_ID: ${{ needs.packer_build.outputs.ami_id }}"
          cd ${{ github.event.repository.name }}/terraform

          aws sts get-caller-identity --region=us-east-1

          terraform init
          terraform plan -var="ami_id=${{ needs.packer_build.outputs.ami_id }}"
          terraform apply -var="ami_id=${{ needs.packer_build.outputs.ami_id }}" -auto-approve
